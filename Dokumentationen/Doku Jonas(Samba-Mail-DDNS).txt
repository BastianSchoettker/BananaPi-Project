3.7	Mail-Server
Um Statusbenachrichtigungen zu erhalten, wurde ein Mail-Server auf dem Pi eingerichtet, welcher als Relay über Google Mail fungiert. Dazu wurde ein Google Mail Konto eingerichtet, auf welches Post Fix zugreift und Mails verschickt. 
Alle System Mails werden Über das Google-Konto weitergeleitet, dazu gehören auch Statusmeldungen des Backup-Skripts.
Dieser Weg wurde wegen des geringen Aufwands gewählt. Ohne Relay würde man eine eigene Domain und sehr viel mehr Konfiguration benötigen. Da ein Google Mail Konto nie verfällt, war dies die beste und pflegeleichteste Möglichkeit.
Weiterhin können die Mails auch an jede beliebige Adresse verschickt werden, dies ist im Mail-Server frei konfigurierbar. Die Mails gehen momentan an die Google Mail Adresse.

3.7.1 Einrichtung

Voraussetzungen:
- Internetzugriff
- Google Mail-Konto
- Texteditor (Nano)
- SSH/Physikalischen Zugriff


1. Post Fix installieren:
apt-get update
apt-get install postfix libsasl2-modules bsd-mailx

2. Das Konfigurationsfenster öffnet sich:
	Internet mit Smarthost
	Mailname: smtp.gmail.com
	Hostname: bananapi

3. TLS/SSL aktivieren:
nano /etc/postfix/main.cf

3.1 Folgendes Einfügen:
smtp_sasl_auth_enable = yes
# noplaintext weglassen, wenn Passwörter im Klartext übertragen werden müssen:
# (nicht empfohlen, nur wenn's anders nicht funktioniert)
smtp_sasl_security_options = noanonymous
smtp_sasl_password_maps = hash:/etc/postfix/sasl_password
# verschluesselung einschalten
smtp_tls_security_level = may

4. Nutzerdaten des Google Mail-Kontos hinterlegen:
nano /etc/postfix/sasl_password
smtp.gmail.com Bananapihfu:<Password>

5. Datei nur für root lesbar machen, da Klartext:
chmod 600 /etc/postfix/sasl_password 

6. Postfix lookup Tabelle erstellen:
postmap hash:/etc/postfix/sasl_password

7. Postfix neustarten:
/etc/init.d/postfix restart

8. Für Weiterleitung der Systemnachrichten aliases bearbeiten:
nano /etc/aliases 
root: bananapihfu@gmail.com //Oder Wunschemail an welche Systemnachrichten gesendet werden

9. Änderungen an Aliases wirksam machen:
Newaliases

Quelle: 
http://my5cent.spdns.de/allgemein/banana-pi-postfix-installieren-und-einrichten.html


3.8	Samba
Um den Dateizugriff zu erleichtern, wurde ein Samba-Server auf dem Pi implementiert.
Samba ermöglicht es von nahezu jedem Gerät auf ein Freigegebenes Verzeichnis auf dem Server zuzugreifen. Voraussetzung ist, dass das Client Betriebssystem das SMB-Protokoll unterstützt.
Die meisten modernen Betriebssysteme, wie Windows, MacOS und andere Unixoide besitzen Samba Funktionalität.

3.8.1 Einrichtung
Voraussetzungen:
- Internetzugriff
- Texteditor (Nano)
- SSH/Physikalischen Zugriff

1. Samba installieren:
sudo apt-get update
sudo apt-get install samba

2. Benutzer für Samba erstellen (Hat keinen Shell-Zugriff):
useradd sambausr --shell /bin/false

3. Passwort für den Benutzer in Samba setzen:
smbpasswd -a <user_name>

4. Verzeichnis im Homer erstellen:
mkdir /home/sambausr
mkdir /home/sambausr/samba

5. Berechtigungen setzen:
chown sambausr:sambausr /home/sambausr/
chown sambausr:sambausr /home/sambausr/samba/

6. Backup der Samba Konfiguration im Homeverzeichnis machen:
cp /etc/samba/smb.conf ~

7. Config bearbeiten:
nano /etc/samba/smb.conf

7.1 folgendes am Ende der Konfiguration Einfügen:
[samba]
path = /home/sambausr/samba
valid users = sambausr
read only = no

8. Service neustarten:
service smbd restart

9. Config testen:
testparm

Quelle: https://help.ubuntu.com/community/How%20to%20Create%20a%20Network%20Share%20Via%20Samba%20Via%20CLI%20%28Command-line%20interface/Linux%20Terminal%29%20-%20Uncomplicated%2C%20Simple%20and%20Brief%20Way%21#About_This_Guide
 



3.9	DDNS
Um immer die aktuelle IP-Adresse des Pi zur Hand zu haben, wurde ein DynDNS-Client von no-ip implementiert, bei jedem Systemstart wird die bei der DNS hinterlegte IP-Adresse aktualisiert.
Nachteil hierbei ist jedoch, dass man alle 30 Tage diese Domain aktivieren muss, da diese sonst verfällt.
Um dies zu umgehen wurde die Kostenfreie Domain bananapihfu.tk gebucht. Von Vorteil ist hier, dass diese Domain eine Laufzeit von einem Jahr hat und nach Ablauf auch ohne Mehrkosten verlängert werden kann.
Diese Domain wird bei Cloudflare verwaltet, da hier auch eine API angeboten wird, mit welcher man Theoretisch komplett auf eine Dynamische DNS bei No-IP verzichten kann.

3.9.1 Einrichtung No-IP
Voraussetzungen:
- Internetzugriff
- SSH/Physikalischen Zugriff
- NoIP.com Account

1. NoIP Hostnamen anlegen:
Man muss in No-IP den gewünschten Hostnamen einrichten, welcher später auf die aktuelle IP-Adresse verweist.
<BILD: noip Domain.jpg>

2. Verzeichnis für DDNS im Homeverzeichnis erstellen und wechseln:
mkdir DDNS
cd DDNS

3. NoIP-Client von NoIP.com beziehen:
wget https://www.noip.com/client/linux/noip-duc-linux.tar.gz

4. Das Archiv entpacken:
tar xvf noip-duc-linux.tar.gz

5. In den Entpackten Ordner wechseln:
cd noip-x.x.x-x (cd noip eingeben und mit TAB vervollständigen)

6. Client bauen und installieren:
make && make install

7. Konfiguration wird gestartet:
Auto configuration for Linux client of no-ip.com.

Multiple network devices have been detected.

Please select the Internet interface from this list.

By typing the number associated with it.
0       eth0.101 -> WAN Interface auswählen
1       eth0.201
2       eth0.202

0

Please enter the login/email string for no-ip.com  bananapihfu
Please enter the password for user 'bananapihfu'  ***********

Only one host [armbianhfu.ddns.net] is registered to this account.
It will be used.
Please enter an update interval:[30]  30
Do you wish to run something at successful update?[N] (y/N)  N

New configuration file '/usr/local/etc/no-ip2.conf' created.



Um den Daemon automatisch bei Systemstart zu starten muss noch folgende Konfiguration vorgenommen werden:
1. Startscript unter /etc/init.d/noip2 ablegen:
vim /etc/init.d/noip2

2. Script "noip2" kopieren und einfügen:
Verweis auf Anhang

3. Script ausführbar machen:
chmod a+rx /etc/init.d/noip2

Quelle: https://www.togaware.com/linux/survivor/No_IP_Manual.html

3.9.2 Einrichtung Custom-Domain
Voraussetzungen:
- Account bei Cloudflare

1. Domain bei Freenom.com aussuchen:
Hier gibt es jede Menge kostenfreie Domains

2. Wunsch-Domain registrieren
<BILD: freenom Domain.jpg>
3. Nameserver bei Freenom ändern:
Um die Domain bei Cloudflare zu verwalten, müssen die Nameserver angepasst werden.
Diese erhält man, wenn man sich bei Cloudflare anmeldet.
<BILD: freenom Nameserver.jpg>

3. CNAME Weiterleitung auf No-Ip einrichten
<BILD: Cloudflare DNS.jpg>










Anhang: noip2-Script
#! /bin/sh
# /etc/init.d/noip2

# Supplied by no-ip.com
# Modified for Debian GNU/Linux by Eivind L. Rygge <eivind@rygge.org>
# Updated by David Courtney to not use pidfile 130130 for Debian 6.
# Updated again by David Courtney to "LSBize" the script for Debian 7.

### BEGIN INIT INFO
# Provides:     noip2
# Required-Start: networking
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start noip2 at boot time
# Description: Start noip2 at boot time
### END INIT INFO

# . /etc/rc.d/init.d/functions  # uncomment/modify for your killproc

DAEMON=/usr/local/bin/noip2
NAME=noip2

test -x $DAEMON || exit 0

case "$1" in
    start)
    echo -n "Starting dynamic address update: "
    start-stop-daemon --start --exec $DAEMON
    echo "noip2."
    ;;
    stop)
    echo -n "Shutting down dynamic address update:"
    start-stop-daemon --stop --oknodo --retry 30 --exec $DAEMON
    echo "noip2."
    ;;

    restart)
    echo -n "Restarting dynamic address update: "
    start-stop-daemon --stop --oknodo --retry 30 --exec $DAEMON
    start-stop-daemon --start --exec $DAEMON
    echo "noip2."
    ;;

    *)
    echo "Usage: $0 {start|stop|restart}"
    exit 1
esac
exit 0













